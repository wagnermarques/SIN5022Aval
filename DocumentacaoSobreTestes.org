#+Title: Documentação Sobre a Realização dos Testes

#+BEGIN_SRC emacs-lisp
(setq org-time-stamp-formats
      '("<%d-%m-%Y-%a>" . "<%Y-%m-%d %a %H:%M:%S>"))
#+END_SRC

#+RESULTS:
: (<%d-%m-%Y-%a> . <%Y-%m-%d %a %H:%M:%S>)


* Pressupostos assumidos
  Considerando que a cobrança é por minuto, é necessário saber se
  frações de minutos serão cobrados ou não.
  
  Por padrão a aplicação tarifa frações de minutos na razão de
  segundos. Isso quer dizer que se uma ligação começa às 7:30h, o
  horário inicial é menor que 8:00h porque, a princípio, faz mais
  sentido. 
  Entretanto, pode ser que se a cobrança é por minuto, minutos
  incompletos poderiam não ser válidos para cobrança o que faz até algum
  sentido também porque um cliente pode dizer que esse minuto incompleto
  poderia não ser tarifado. Nesse caso uma ligação que inicia às 7:30
  poderia ter seu momento de início considerado como sendo 8:00h.
  Portanto, conforme citado, esta aplicação cobra frações de minutos à
  razão de segundos o que na prática pode-se dizer que a cobrança não
  é por minutos, mas por segundos. Entretanto, para que o
  comportamento da aplicação não cobre frações de minutos, ou seja,
  somente minutos cheios, é só passar a opçao
  -DtarifaFracaoDeMinutos=false, por padrão é utilizado true.
  Não tenho certeza no momento em que estou escrevento essa
  documentação se deu tempo de fazer as duas implementações, favor
  consultar o wiki do projeto no github.
  

* Particionamento em classes de equivalência
  
** Identifição do domínio de entrada
   + Momento de inicio da chamada
   + Momento de término da chamada
     

** Implicações sobre o domínio de entrada relevantes para os testes
   + O dominio de entrada define o tipo de ligação
     TarifPadr: Ligação com inicio entre às 8h (inclusive) e 18h (exclusive)
     tarifComDesc: Ligação com início entre às 18h (inclusive) e as 8h
     do dia seguinte (excluse)
     TarifDif: Ligação com início dentro do período ou da TarifPadr ou
     da TarifComDesc mas com término dentro do próximo tipo de tarifação
   + Duração da chamada     
     A Duração da chamada define se a ligação deve sofrer desconto de
     15% na tarifação, independente do tipo de ligação 


** Classes de Equivalência para horário de Tarifa Padrão (TarifPadr)  0.40/min (Sem Desc Adicional)
   M >= 8h e M<18h Cobrança com preço cheio 0,4 p/min
| Variável de Entrada | Classes Eq Válidas                          | Classes Eq Inválidas                          |
| Mi                  | DD/MM/AA:08:00:00 <= Mi < DD/MM/AA:18:00:00 | DD/MM/AA:18:00:00 <= Mi < DD+1/MM/AA:08:00:00 |
| Mt                  | DD/MM/AA:08:00:00 < Mi < DD/MM/AA:18:00:00  | DD/MM/AA:18:00:00 <= Mt < DD+1/MM/AA:08:00:00 |
| Du = (Mt-Mi)        | Du < 60                                     | Du >= 60                                      |
Uma ligação será considerada como cobrança cheia, ou seja, tarifa
padrão (TarifPadr) sem desconto adicional (Sem Desc Adicional) se a
ligação tiver seu momento inicial (Mi) entre 8 da manhã (inclusive) e
18h (exclusive).
Essa ligação pode terminar muito rápida, 8h e 1 segundo, por exemplo,
mas tem que terminar até as 18:00h (exclusive); Tem que terminar
porque se terminar em outra faixa de horário não é mais uma ligação do
tipo de tarifa padrão, viraria tarifa diferenciada.
Além disso, considerando que uma ligação pode ter desconto de 15 por
cento caso seja maior que 60 min, então, como essas classes de
equivalencia é para ligações de tarifa padrão sem desconto adicional,
então a duração da ligação deve ser menor que 60min. Mais adiante são
estabelecidas classes de equivalencias para ligações com desconto que
explora essa questão. Por isso uma duração maior que 60 neste caso é
uma classe inválida.

*** Casos de testes para essas classes de equivalencia
    Casos de testes para clases de equivalência para ligações de
    Tarifa Padrão Sem Desconto Adicional.

#+CAPTION: Casos de Testes para Ligações Com Tarifa Padrao Sem Desconto Adicional
#+NAME:   TarifPadrSemDescAdic
| obs                                | TC Num | mi                           | mt       |   |
| Vlr Típico Classe Válida           |      1 | 04/Nov/2015 15:00:00         | mi+20Min |   |
| Vlr Típico Classe Inválida         |      2 | 04/Nov/2015 19:00:00         | mi+20Min |   |
| Explora limite 8h em ponto         |      3 | 04/Nov/2015 15:08:00         | mi+59Min |   |
| Explora limite anterior as 8h      |      4 | 04/Nov/2015 15:08:00 - 1 Seg | mi+59Min |   |
| Explora limite posterior as 8h     |      5 | 04/Nov/2015 15:08:00 + 1 Seg | mi+59Min |   |
| Explora limite anterior as 18:00h  |      6 | 04/Nov/2015 17:00:59         | mi+59Min |   |
| Explora limite posterior as 18:00h |      7 | 04/Nov/2015 18:00:01         | mi+59Min |   |



#+NAME: TC1 Vlr Típico Classe Válida
#+BEGIN_SRC java 
    	String label0="###[1] [TarifPadr SemDescAdic] (pegando um vlr tipico de uma classe valida) ";
        LocalDateTime mi0= LocalDateTime.of(2015,Month.NOVEMBER,04,15,0);
        LocalDateTime mt0 = mi0.plusMinutes(20);        
        double vlr0 = 8.0;
        String tipoDeTarificacao0 = "TarifPadr";

    	String label0="###[2] [TarifPadr SemDescAdic] (pegando um vlr tipico de uma classe INvalida) ";
        LocalDateTime mi0= LocalDateTime.of(2015,Month.NOVEMBER,04,19,0);
        LocalDateTime mt0 = mi0.plusMinutes(20);        
        double vlr0 = 8.0;
        String tipoDeTarificacao0 = "TarifPadr";

        String label1="###[3] [TarifPadr SemDescAdic] (Explora vlr limite 8h: Ligacao de 59min que comeca 8h em ponto) ";    	
        LocalDateTime mi1 = LocalDateTime.of(2015,Month.NOVEMBER,04,8,0);
        LocalDateTime mt1 = mi1.plusMinutes(59);        
        double vlr1 = 23.6;
        String tipoDeTarificacao1 = "TarifPadr";              

        String label1="###[4] [TarifPadr SemDescAdic] (Explora vlr limite anterior as 8h: Ligacao de 59min que comeca 7h:59min:59Seg";
        LocalDateTime mt1 = LocalDateTime.of(2015,Month.NOVEMBER,04,8,0).minusSeconds(2);//8 horas menos dois segundos
        LocalDateTime mi1 = mt1.minusMinutes(59);
        double vlr1 = 23.6;
        String tipoDeTarificacao1 = "TarifPadr";

        String label2="###[5] [TarifPadr SemDescAdic] (Explora vlr limite Posterior 8h: ligacao de 59 min que comeca as 8h:00:01) ";
        LocalDateTime mi2 = LocalDateTime.of(2015,Month.NOVEMBER,04,8,0).plusSeconds(1);
        LocalDateTime mt2 = mi2.plusMinutes(59);
        double vlr2 = 23.6;
        String tipoDeTarificacao2 = "TarifPadr";

        String label3="###[6] [TarifPadr SemDescAdic] (Explora vlr limite anterior 18h: ligacao de 59 min que termina as 18 menos 1 segundo) ";
        LocalDateTime mi3 = LocalDateTime.of(2015,Month.NOVEMBER,04,18,0).minusSeconds((59*60)-1);
        LocalDateTime mt3 = mi3.plusMinutes(59);
        double vlr3 = 23.6;
        String tipoDeTarificacao3 = "TarifPadr";

        String label2="###[7] [TarifPadr SemDescAdic] (Explora vlr limite posterior as 18h: ligacao de 59min que termina as 18:00:01)";
        LocalDateTime mi2 = LocalDateTime.of(2015,Month.NOVEMBER,04,18,0).).plusSeconds(1);
        LocalDateTime mt2 = mi2.plusMinutes(59);
        double vlr2 = 23.6;
        String tipoDeTarificacao2 = "TarifPadr";
#+END_SRC

        
    
                                



>>>>>###[1] M >= 8h e M<18h CobranÃ§a com preÃ§o cheio 0,4 p/min Sem Desc Adiconal (pegando um vlr tipico de uma classe valida) 
>>>>> Tipo de Tarifacao esperado = TarifPadr / Obtido:TarifPadr
>>>>>2015-11-04T15:00 - 2015-11-04T15:20du=20 VlrEsperado=8.0/VlrObtido=8.0

>>>>>###[2] M >= 8h e M<18h CobranÃ§a com preÃ§o cheio 0,4 p/min Sem Desc Adiconal (pegando um vlr tipico de uma classe INvalida) 
>>>>> Tipo de Tarifacao esperado = TarifPadr / Obtido:null
>>>>>2015-11-04T19:00 - 2015-11-04T19:20du=20 VlrEsperado=8.0/VlrObtido=0.0

>>>>>###[3] M >= 8h e M<18h CobranÃ§a com preÃ§o cheio 0,4 p/min Sem Desc Adiconal (Explora vlr limite 8h: Ligacao de 59min que comeca 8h em ponto) 
>>>>> Tipo de Tarifacao esperado = TarifPadr / Obtido:TarifPadr
>>>>>2015-11-04T08:00 - 2015-11-04T08:59du=59 VlrEsperado=23.6/VlrObtido=23.6

>>>>>###[4] M >= 8h e M<18h CobranÃ§a com preÃ§o cheio 0,4 p/min Sem Desc Adiconal (Explora vlr limite anterior as 8h: Ligacao de 59min que comeca 7h:59min:59Seg
>>>>> Tipo de Tarifacao esperado = TarifPadr / Obtido:TarfComDesc
>>>>>2015-11-04T07:00:58 - 2015-11-04T07:59:58du=59 VlrEsperado=23.6/VlrObtido=11.8

>>>>>###[5] M >= 8h e M<18h CobranÃ§a com preÃ§o cheio 0,4 p/min Sem Desc Adiconal (Explora vlr limite Posterior 8h: ligacao de 59 min que comeca as 8h:00:01) 
>>>>> Tipo de Tarifacao esperado = TarifPadr / Obtido:TarifPadr
>>>>>2015-11-04T08:00:01 - 2015-11-04T08:59:01du=59 VlrEsperado=23.6/VlrObtido=23.6

>>>>>###[6] M >= 8h e M<18h CobranÃ§a com preÃ§o cheio 0,4 p/min Sem Desc Adiconal (Explora vlr limite anterior 18h: ligacao de 59 min que termina as 18 menos 1 segundo) 
>>>>> Tipo de Tarifacao esperado = TarifPadr / Obtido:TarifPadr
>>>>>2015-11-04T16:01:01 - 2015-11-04T17:00:01du=59 VlrEsperado=23.6/VlrObtido=23.6

>>>>>###[7] M >= 8h e M<18h CobranÃ§a com preÃ§o cheio 0,4 p/min Sem Desc Adiconal (Explora vlr limite posterior as 18h: ligacao de 59min que termina as 18:00:01)
>>>>> Tipo de Tarifacao esperado = TarifPadr / Obtido:null
>>>>>2015-11-04T17:01 - 2015-11-04T18:00du=59 VlrEsperado=23.6/VlrObtido=0.0



** Classes de Equivalência para horário de Tarifa Padrão (TafifPadr) + Desconto Adicional
| Variável de Entrada | Classes Eq Válidas                          | Classes Eq Inválidas                          |
| Mi                  | DD/MM/AA:08:00:00 <= Mi < DD/MM/AA:18:00:00 | DD/MM/AA:18:00:00 <= Mi < DD+1/MM/AA:08:00:00 |
| Mt                  | DD/MM/AA:08:00:00 < Mi < DD/MM/AA:18:00:00  | DD/MM/AA:18:00:00 <= Mt < DD+1/MM/AA:08:00:00 |
| Du = (Mt-Mi)        | Du >= 60                                    | Du < 60                                       |
Essas classes de equivalência são semelhantes às anteriores, mas agora
queremos observar o comportamento da duração da ligação nas condições
de tarifa padrão. Por isso, agora ligações que duram 60min ou mais faz
parte de uma classe válida e menor que 60 uma classe inválida.


** Classes de Equivalência para horário de Tarifa com Desconto (TarifComDesc) Sem Desc Adic
| Variável de Entrada | Classes Eq Válidas                            | Classes Eq Inválidas                        |
| Mi                  | DD/MM/AA:18:00:00 <= Mi < DD+1/MM/AA:08:00:00 | DD/MM/AA:08:00:00 <= Mi < DD/MM/AA:18:00:00 |
| Mt                  | DD/MM/AA:18:00:00 < Mt < DD+1/MM/AA:08:00:00  | DD/MM/AA:08:00:00 <= Mt < DD/MM/AA:18:00:00 |
| Du = (Mt-Mi)        | Du < 60                                       | Du < 60                                     |


** Classes de Equivalência para horário de tarifa com desconto (TafifComDesc + DescAdicional) de 50% 
| Variável de Entrada | Classes Eq Válidas                            | Classes Eq Inválidas                        |
| Mi                  | DD/MM/AA:18:00:00 <= Mi < DD+1/MM/AA:08:00:00 | DD/MM/AA:08:00:00 <= Mi < DD/MM/AA:18:00:00 |
| Mt                  | DD/MM/AA:18:00:00 < Mt < DD+1/MM/AA:08:00:00  | DD/MM/AA:08:00:00 <= Mt < DD/MM/AA:18:00:00 |
| Du = (Mt-Mi)        | Du >= 60                                      | Du < 60                                     |


** Classes de Equivalência para horário de tarifa diferencial (TarifDif)
*** Para o caso de inicio na tarifa com desconto e termino na tarifa padrao Sem Desc Adicional (Vice)
| Variável de Entrada | Classes Eq Válidas                          | Classes Eq Inválidas                        |
| Mi                  | DD/MM/AA:00:00:00 <= Mi < DD/MM/AA:08:00:00 | DD/MM/AA:08:00:00 <= Mi < DD/MM/AA:18:00:00 |
| Mt                  | Mt > = DD/MM/AA:08:00:00                    | Mt qualquer                                 |
| Du = (Mt-Mi)        | Du < 60                                     | Du qualquer                                 |
Momento inicial das 0 as quase 8 (horário com desconto) mas que
terminam (Mt) de 08:00h em ponto em diante. Não precisa testar
ligacoes que começam as 18:00h porque mesmo que dure até as 8:00h da
manhã do dia seguinte 

*** Para o caso de inicio na tarifa com desconto e termino na tarifa padrao  Com Desc Adicional (Vice)
| Variável de Entrada | Classes Eq Válidas                          | Classes Eq Inválidas                        |
| Mi                  | DD/MM/AA:00:00:00 <= Mi < DD/MM/AA:08:00:00 | DD/MM/AA:08:00:00 <= Mi < DD/MM/AA:18:00:00 |
| Mt                  | Mt > = DD/MM/AA:08:00:00                    | Mt qualquer                                 |
| Du = (Mt-Mi)        | Du > 60                                     | Du qualquer                                 |


*** Para o caso de inicio na tarifa com desconto (parte da tarde) e termino na tarifa padrao Com Desconto Adicional  (Vice)
| Variável de Entrada | Classes Eq Válidas                            | Classes Eq Inválidas                        |
| Mi                  | DD/MM/AA:18:00:00 <= Mi < DD+1/MM/AA:08:00:00 | DD/MM/AA:08:00:00 <= Mi < DD/MM/AA:18:00:00 |
| Mt                  | Mt >= DD+1/MM/AA:08:00:00                     | Mt qualquer                                 |
| Du = (Mt-Mi)        | Du > 60                                       | Du < 60                                     |
Aqui só pega ligações muito longas, até improváveis de acontecerem
mas... Obviamente se uma ligação ir de um dia anterior até o próximo
dia depois das 8, sempre será maior que 60 min.
Mt qualquer, significa que se o Mi inicial começar num intervalo que
não é de tarifação com desconto, não importa qdo termina porque não
vai dar pra testar uma ligação que começa num horário com desconto e
termina num horário sem desconto.

*** Para o caso de inicio na tarifa padrao e término na tarifa com desconto (Versa)
| Variável de Entrada | Classes Eq Válidas                          | Classes Eq Inválidas                          |
| Mi                  | DD/MM/AA:08:00:00 <= Mi < DD/MM/AA:18:00:00 | DD/MM/AA:18:00:00 <= Mi < DD+1/MM/AA:08:00:00 |
| Mt                  | Mt > DD/MM/AA:18h                           | Mt >= DD/MM/AA:18                             |
| Du = (Mt-Mi)        | Du < 60                                     | Du > 60                                       |



* temp
 C-u C-u C-c . (Insere timestamp)
 C-u C-c * (Recalcula tabela)
 C-' (Editar formula)
