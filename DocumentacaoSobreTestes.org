#+Title: Documentação Sobre a Realização dos Testes


* Observações relevantes
  Considerando que a cobrança é por minuto, é interessante saber se
  frações de minutos serão cobrados ou não. As classes de
  equivalencias e os limites consideram cobranças com frações de
  minutos. 
  Sendo assim, para testar os limites de uma ligação que termina âs
  8:00h foram explorados como limites anteriroes e posteriores os
  horários de 7:00:59 e 8:00:01, respectivamente. 
  O ideal seria explorar os limites também em unidades de minutos para
  identificar se, por algum motivo, não estaria havendo cobrança de
  fração de minutos.  
  As ligações dos casos de testes relevantes para os casos em que não
  há desconto adiconal são sempre de 59 minutos. Uma melhoria seria
  fazer também de 59 minutos e 59 segundos já que quanto mais se
  aproximar dos extremos maior são as probabilidades de se detectar
  erros.
  
* Particionamento em classes de equivalência
  
** Identifição do domínio de entrada
   + Momento de inicio da chamada
   + Momento de término da chamada     


** Implicações sobre o domínio de entrada relevantes para os testes
   + O dominio de entrada define o tipo de ligação

     *TarifPadr*: Ligação com inicio entre às 8h (inclusive) e 18h (exclusive)
     
     *tarifComDesc*: Ligação com início entre às 18h (inclusive) e as 8h
     do dia seguinte (excluse)
     
     *TarifDif*: Uma ligação pode ter início dentro do período da tarifa
     padrão e terminar no período da tarifa com desconto e vice versa.


   + Duração da chamada     
     A Duração da chamada define se a ligação deve sofrer desconto de
     15% na tarifação, independente do tipo de ligação. 


** Classes de Equivalência para horário de Tarifa Padrão (TarifPadr)  R$ 0.40/min (Sem Desc Adicional)
   M >= 8h e M<18h Cobrança com preço cheio 0,4 p/min
| Variável de Entrada | Classes Eq Válidas                          | Classes Eq Inválidas                          |
| Mi                  | DD/MM/AA:08:00:00 <= Mi < DD/MM/AA:18:00:00 | DD/MM/AA:18:00:00 <= Mi < DD+1/MM/AA:08:00:00 |
| Mt                  | DD/MM/AA:08:00:00 < Mi < DD/MM/AA:18:00:00  | DD/MM/AA:18:00:00 <= Mt < DD+1/MM/AA:08:00:00 |
| Du = (Mt-Mi)        | Du < 60                                     | Du >= 60                                      |
Uma ligação será considerada como cobrança cheia, ou seja, tarifa
padrão (TarifPadr) sem desconto adicional (Sem Desc Adicional) se a
ligação tiver seu momento inicial (Mi) entre 8 da manhã (inclusive) e
18h (exclusive).
Essa ligação pode terminar muito rápida, 8h e 1 segundo, por exemplo,
mas tem que terminar até as 18:00h (exclusive); Tem que terminar
porque se terminar em outra faixa de horário não é mais uma ligação do
tipo de tarifa padrão, viraria tarifa diferenciada.
Além disso, considerando que uma ligação pode ter desconto de 15 por
cento caso seja maior que 60 min, então, como essas classes de
equivalencia é para ligações de tarifa padrão sem desconto adicional,
então a duração da ligação deve ser menor que 60min. Mais adiante são
estabelecidas classes de equivalencias para ligações com desconto que
explora essa questão. Por isso uma duração maior que 60 neste caso é
uma classe inválida.

*** Casos de testes para essas classes de equivalencia
    Casos de testes para clases de equivalência para ligações de
    Tarifa Padrão Sem Desconto Adicional.

#+CAPTION: Casos de Testes para Ligações Com Tarifa Padrao Sem Desconto Adicional
#+NAME:   TarifPadrSemDescAdic
| obs                                | TC Num | mi                           | mt       |   |
| Vlr Típico Classe Válida           |      1 | 04/Nov/2015 15:00:00         | mi+20Min |   |
| Vlr Típico Classe Inválida         |      2 | 04/Nov/2015 19:00:00         | mi+20Min |   |
| Explora limite 8h em ponto         |      3 | 04/Nov/2015 15:08:00         | mi+59Min |   |
| Explora limite anterior as 8h      |      4 | 04/Nov/2015 15:08:00 - 1 Seg | mi+59Min |   |
| Explora limite posterior as 8h     |      5 | 04/Nov/2015 15:08:00 + 1 Seg | mi+59Min |   |
| Explora limite anterior as 18:00h  |      6 | 04/Nov/2015 17:00:59         | mi+59Min |   |
| Explora limite posterior as 18:00h |      7 | 04/Nov/2015 18:00:01         | mi+59Min |   |



#+NAME: TC1 Vlr Típico Classe Válida
#+BEGIN_SRC java 
    	String label0="###[1] [TarifPadr SemDescAdic] (pegando um vlr tipico de uma classe valida) ";
        LocalDateTime mi0= LocalDateTime.of(2015,Month.NOVEMBER,04,15,0);
        LocalDateTime mt0 = mi0.plusMinutes(20);        
        double vlr0 = 8.0;
        String tipoDeTarificacao0 = "TarifPadr";

    	String label0="###[2] [TarifPadr SemDescAdic] (pegando um vlr tipico de uma classe INvalida) ";
        LocalDateTime mi0= LocalDateTime.of(2015,Month.NOVEMBER,04,19,0);
        LocalDateTime mt0 = mi0.plusMinutes(20);        
        double vlr0 = 8.0;
        String tipoDeTarificacao0 = "TarifPadr";

        String label1="###[3] [TarifPadr SemDescAdic] (Explora vlr limite 8h: Ligacao de 59min que comeca 8h em ponto) ";    	
        LocalDateTime mi1 = LocalDateTime.of(2015,Month.NOVEMBER,04,8,0);
        LocalDateTime mt1 = mi1.plusMinutes(59);        
        double vlr1 = 23.6;
        String tipoDeTarificacao1 = "TarifPadr";              

        String label1="###[4] [TarifPadr SemDescAdic] (Explora vlr limite anterior as 8h: Ligacao de 59min que comeca 7h:59min:59Seg";
        LocalDateTime mt1 = LocalDateTime.of(2015,Month.NOVEMBER,04,8,0).minusSeconds(2);//8 horas menos dois segundos
        LocalDateTime mi1 = mt1.minusMinutes(59);
        double vlr1 = 23.6;
        String tipoDeTarificacao1 = "TarifPadr";

        String label2="###[5] [TarifPadr SemDescAdic] (Explora vlr limite Posterior 8h: ligacao de 59 min que comeca as 8h:00:01) ";
        LocalDateTime mi2 = LocalDateTime.of(2015,Month.NOVEMBER,04,8,0).plusSeconds(1);
        LocalDateTime mt2 = mi2.plusMinutes(59);
        double vlr2 = 23.6;
        String tipoDeTarificacao2 = "TarifPadr";

        String label3="###[6] [TarifPadr SemDescAdic] (Explora vlr limite anterior 18h: ligacao de 59 min que termina as 18 menos 1 segundo) ";
        LocalDateTime mi3 = LocalDateTime.of(2015,Month.NOVEMBER,04,18,0).minusSeconds((59*60)-1);
        LocalDateTime mt3 = mi3.plusMinutes(59);
        double vlr3 = 23.6;
        String tipoDeTarificacao3 = "TarifPadr";

        String label2="###[7] [TarifPadr SemDescAdic] (Explora vlr limite posterior as 18h: ligacao de 59min que termina as 18:00:01)";
        LocalDateTime mi2 = LocalDateTime.of(2015,Month.NOVEMBER,04,18,0).).plusSeconds(1);
        LocalDateTime mt2 = mi2.plusMinutes(59);
        double vlr2 = 23.6;
        String tipoDeTarificacao2 = "TarifPadr";
#+END_SRC


** Classes de Equivalência para horário de Tarifa Padrão (TafifPadr) (Com Desconto Adicional)
| Variável de Entrada | Classes Eq Válidas                          | Classes Eq Inválidas                          |
| Mi                  | DD/MM/AA:08:00:00 <= Mi < DD/MM/AA:18:00:00 | DD/MM/AA:18:00:00 <= Mi < DD+1/MM/AA:08:00:00 |
| Mt                  | DD/MM/AA:08:00:00 < Mi < DD/MM/AA:18:00:00  | DD/MM/AA:18:00:00 <= Mt < DD+1/MM/AA:08:00:00 |
| Du = (Mt-Mi)        | Du >= 60                                    | Du < 60                                       |
Essas classes de equivalência são semelhantes às anteriores, mas agora
queremos observar o comportamento da duração da ligação nas condições
de tarifa padrão. Por isso, agora ligações que duram 60min ou mais faz
parte de uma classe válida e menor que 60 uma classe inválida.

#+CAPTION: Casos de Testes para Ligações Com Tarifa Padrao Com Desconto Adicional
#+NAME:   TarifPadrComDescAdic
| obs                                 | TC Num | mi                   | mt        |   |
| Explora vlr limite 60min            |      8 | 04/Nov/2015 15:00:01 | mi+60Min  |   |
| Explorar vlr limite posterior 60min |      9 | 04/Nov/2015 15:00:01 | mi+120Min |   |


#+NAME: TarifPadr+DescAdic
#+BEGIN_SRC java
        String label3="###[8] [TarifPadr SemDescAdic] (Explora vlr limite 60min: ligacao de 60min)";
        LocalDateTime mi3 = LocalDateTime.of(2015,Month.NOVEMBER,04,15,0);
        LocalDateTime mt3 = mi3.plusMinutes(60);
        double vlr3 = 23.6;
        String tipoDeTarificacao3 = "TarifPadr";

        String label4="###[9] [TarifPadr+DescAdic] (Explora vlr limite posterior 60min: ligacao de 120min) ";
        LocalDateTime mi4 = LocalDateTime.of(2015,Month.NOVEMBER,04,15,0);
        LocalDateTime mt4 = mi4.plusMinutes(120);
        double vlr4 = 40.80;
        String tipoDeTarificacao4 = "TarifPadr-DescAdicional";

#+END_SRC


** Classes de Equivalência para horário de Tarifa com Desconto (TarifComDesc) (Sem Desc Adicional)
| Variável de Entrada | Classes Eq Válidas                            | Classes Eq Inválidas                        |
| Mi                  | DD/MM/AA:18:00:00 <= Mi < DD+1/MM/AA:08:00:00 | DD/MM/AA:08:00:00 <= Mi < DD/MM/AA:18:00:00 |
| Mt                  | DD/MM/AA:18:00:00 < Mt < DD+1/MM/AA:08:00:00  | DD/MM/AA:08:00:00 <= Mt < DD/MM/AA:18:00:00 |
| Du = (Mt-Mi)        | Du < 60                                       | Du < 60                                     |

#+NAME:Tbl TarifComDesc
#+CAPTION: Casos de testes para horário com Desconto (Sem Desconto Adicional)
| obs                                    | TC Num | mi                          | mt       |   |
| Caso típico da classe válida           |     10 | 04/Nov/2015 00:00:00        | mi+20Seg |   |
| Caso típico de classe inválida         |     11 | 04/Nov/2015 10:00:00        | mi+20Seg |   |
| Explorar Vlr Limite 18h                |     12 | 04/Nov/2015 18:00:00        | mi+59Min |   |
| Explora Vlr Limite anterior 18h        |     13 | 04/Nov/2015 18:00:00 - 2Seg | mi+59Min |   |
| Explora Vlr Limite posterior 18H       |     14 | 04/Nov/2015 18:00:00 + 1Seg | mi+59Min |   |
| Explorar Limite anterior de termino 8h |     15 | 04/Nov/2015 07:01:59        | mi+59Min |   |
| Explorar Limite posterior Mt 8h        |     16 | 04/Nov/2015 07:01:00        | mi+59Min |   |



#+NAME:TarifComDesc
#+BEGIN_SRC java
    	String label5="###[10] [TarifComDesc SemDescAdic] (pegando um vlr tipico de uma classe valida) ";
        LocalDateTime mi5= LocalDateTime.of(2015,Month.NOVEMBER,04,0,0);
        LocalDateTime mt5 = mi5.plusMinutes(20);        
        double vlr5 = 4.0;
        String tipoDeTarificacao5 = "TarifComDesc";

    	String label4="###[11] [TarifComDesc SemDescAdic] (pegando um vlr tipico de uma classe INvalida) ";
        LocalDateTime mi4= LocalDateTime.of(2015,Month.NOVEMBER,04,10,0);
        LocalDateTime mt4 = mi4.plusMinutes(20);        
        double vlr4 = 8.0;
        String tipoDeTarificacao4 = "TarifPadr";

        String label6="###[12] [TarifComDesc SemDescAdic] (Explora vlr limite 18h: Ligacao de 59min que comeca 18h em ponto) ";    	
        LocalDateTime mi6 = LocalDateTime.of(2015,Month.NOVEMBER,04,18,0);
        LocalDateTime mt6 = mi6.plusMinutes(59);        
        double vlr6 = 11;
        String tipoDeTarificacao6 = "TarifComDesc";              

        String label5="###[13] [TarifComDesc SemDescAdic] (Explora vlr limite anterior as 18h: Ligacao de 59min que comeca 17h:59min:59Seg";
        LocalDateTime mt5 = LocalDateTime.of(2015,Month.NOVEMBER,04,18,0).minusSeconds(2);//8 horas menos dois segundos
        LocalDateTime mi5 = mt5.minusMinutes(59);
        double vlr5 = 11;
        String tipoDeTarificacao5 = "TarifComDesc";

        String label7="###[14] [TarifComDesc SemDescAdic] (Explora vlr limite Posterior 18h: ligacao de 59 min que comeca as 18h:00:01) ";
        LocalDateTime mi7 = LocalDateTime.of(2015,Month.NOVEMBER,04,18,0).plusSeconds(1);
        LocalDateTime mt7 = mi7.plusMinutes(59);
        double vlr7 = 11;
        String tipoDeTarificacao7 = "TarifComDesc";        

        String label8="###[15] [TarifComDesc SemDescAdic] (Explora vlr limite anterior 8h do dia Seguinte: ligacao de 59 min que termina as 8 menos 1 segundo) ";
        LocalDateTime mi8 = LocalDateTime.of(2015,Month.NOVEMBER,04,18,0).minusSeconds(1);
        LocalDateTime mt8 = mi8.plusMinutes(59);
        double vlr8 = 11;
        String tipoDeTarificacao8 = "TarifComDesc";        

        String label6="###[16] [TarifComDesc SemDescAdic] (Explora vlr limite posterior as 8h do dia seguinte: ligacao de 59min que termina as 8h do dia seguinte)";
        LocalDateTime mi6 = LocalDateTime.of(2015,Month.NOVEMBER,05,8,0).minusMinutes(59);
        LocalDateTime mt6 = mi6.plusMinutes(59);
        double vlr6 = 11;//isso da outro valor
        String tipoDeTarificacao6 = "TarifComDesc+DescAdic";

#+END_SRC


** Classes de Equivalência para horário de tarifa com desconto (TafifComDesc) (Com Desc Adicional)
| Variável de Entrada | Classes Eq Válidas                            | Classes Eq Inválidas                        |
| Mi                  | DD/MM/AA:18:00:00 <= Mi < DD+1/MM/AA:08:00:00 | DD/MM/AA:08:00:00 <= Mi < DD/MM/AA:18:00:00 |
| Mt                  | DD/MM/AA:18:00:00 < Mt < DD+1/MM/AA:08:00:00  | DD/MM/AA:08:00:00 <= Mt < DD/MM/AA:18:00:00 |
| Du = (Mt-Mi)        | Du >= 60                                      | Du < 60                                     |

#+NAME:Tbl TarifComDesc+DescAdic
#+CAPTION: Casos de testes para horário com Desconto (Com Desconto Adicional)
| obs                            | TC Num | mi                   | mt        |   |
| Explora ligacao com 60min      |     17 | 04/Nov/2015 00:00:00 | mi+60Min  |   |
| Explorar Ligacao mais de 60Min |     18 | 04/Nov/2015 00:00:00 | mi+120Min |   |

#+NAME:TarifComDesc
#+BEGIN_SRC java
        String label7="###[8 17] [TarifComDesc SemDescAdic] (Explora vlr limite 60min: ligacao de 60min)";
        LocalDateTime mi7 = LocalDateTime.of(2015,Month.NOVEMBER,04,0,0);
        LocalDateTime mt7 = mi7.plusMinutes(60);
        double vlr7 = 11;//teria que ter o desconto adicional
        String tipoDeTarificacao7 = "TarifComDesc"; //essa tem desc adicional

        String label8="###[18] [TarifComDesc SemDescAdic] (Explora vlr limite 60min: ligacao de 120min)";
        LocalDateTime mi8 = LocalDateTime.of(2015,Month.NOVEMBER,04,0,0);
        LocalDateTime mt8 = mi8.plusMinutes(120);
        double vlr8 = 11;//teria que ter o desconto adicional
        String tipoDeTarificacao8 = "TarifComDesc"; //essa tem desc adicional
#+END_SRC



** Classes de Equivalência para horário de tarifa diferencial (TarifDif)

*** Para o caso de inicio na tarifa com desconto (de manha) e termino na tarifa padrao (Sem Desc Adicional) (Vice)
| Variável de Entrada | Classes Eq Válidas                          | Classes Eq Inválidas                        |
| Mi                  | DD/MM/AA:00:00:00 <= Mi < DD/MM/AA:08:00:00 | DD/MM/AA:08:00:00 <= Mi < DD/MM/AA:18:00:00 |
| Mt                  | Mt > = DD/MM/AA:08:00:00                    | Mt qualquer                                 |
| Du = (Mt-Mi)        | Du < 60                                     | Du qualquer                                 |
Momento inicial das 0 as quase 8 (horário com desconto) mas que
terminam (Mt) de 08:00h em ponto em diante. Não precisa testar
ligacoes que começam as 18:00h porque mesmo que dure até as 8:00h da
manhã do dia seguinte 

#+NAME:Tbl TarifDif (da Padr p/ ComDesc [manha] para TarifPadr Sem Desconto Adic)
#+CAPTION: Casos de Testes p/ Tarifa Diferencial saindo do horário de tarif com desconto (manha) para horario de tarifa padrao (Sem Desc Adicional)
| obs                                    | TC Num | mi                           | mt       |          |
| Ligacao de uma classe tipica valido    |     19 | 04/Nov/2015 07:50:00         | mi+59Min | valido   |
| Ligacao de uma classe tipica invalida  |     20 | 04/Nov/2015 08:00:00         | mi+59Min | invalido |
| Explora limite de termino as 8h        |     21 | 04/Nov/2015 08:00:00 - 59Min | mi+59Min | valido   |
| Explorar limite de termino antes das 8 |     22 | 04/Nov/2015 07:59:59 - 59Min | mi+59Min | invalido |
| Explorar limite de termino apos as 8h  |     23 | 04/Nov/2015 08:00:01 - 59Min | mi+59Min | valido   |



#+NAME TarifDif (da Par p/ Com Desc (manha) para TarifPadr) (Sem Desc Adicional)
#+BEGIN_SRC java
        String label9="###[19] [TarifDif SemDescAdic] (Ligacao de uma classe tipica valido: ligacao de 20 min das 7:50 as 8:10) ";
        LocalDateTime mi9 = LocalDateTime.of(2015,Month.NOVEMBER,04,8,0).minusSeconds(60);
        LocalDateTime mt9 = mi9.plusMinutes(59);
        double vlr9 = 6;
        
        String label9="###[20] [TarifDif SemDescAdic] (Ligacao de uma classe tipica INvalido: ligacao de 59 min das 8:00 as 8:59) ";
        LocalDateTime mi9 = LocalDateTime.of(2015,Month.NOVEMBER,04,8,0).minusSeconds(60);
        LocalDateTime mt9 = mi9.plusMinutes(59);
        double vlr9 = 23.6;

        String label10="###[21] [TarifDif SemDescAdic] (Explora limite de termino as 8h: ) ";
        LocalDateTime mi10 = LocalDateTime.of(2015,Month.NOVEMBER,04,8,0).minusSeconds(59);
        LocalDateTime mt10 = mi10.plusMinutes(59);
        double vlr10 = 11.8;
        
        String label10="###[22] [TarifDif SemDescAdic] (Ligacao de uma classe tipica valido: Explorar limite de termino antes das 8) ";
        LocalDateTime mi10 = LocalDateTime.of(2015,Month.NOVEMBER,04,8,0).minusSeconds(60);
        LocalDateTime mt10 = mi10.plusMinutes(59);
        double vlr10 = 11.8;

        String label11="###[23] [TarifDif SemDescAdic] (Explorar limite de termino apos as 8h: Ligacao das 7:00:02 as 8:00:01) ";
        LocalDateTime mi11 = LocalDateTime.of(2015,Month.NOVEMBER,04,8,0).minusSeconds(58);
        LocalDateTime mt11 = mi11.plusMinutes(59);
        double vlr11 = 11.8;       
#+END_SRC


*** Para o caso de inicio na tarifa com desconto (de manha) e termino na tarifa padrao  (Com Desc Adicional) (Vice)
| Variável de Entrada | Classes Eq Válidas                          | Classes Eq Inválidas                        |
| Mi                  | DD/MM/AA:00:00:00 <= Mi < DD/MM/AA:08:00:00 | DD/MM/AA:08:00:00 <= Mi < DD/MM/AA:18:00:00 |
| Mt                  | Mt > = DD/MM/AA:08:00:00                    | Mt qualquer                                 |
| Du = (Mt-Mi)        | Du > 60                                     | Du qualquer                                 |

#+NAME:Tbl TarifDir (da Tarifa ComDesc (de manha) para Tarif Padrao Com Desconto Adic)
#+CAPTION: Casos de Testes p/ Tarifa Diferencia saindo do horário de tarif com desc (manha) para horario de tarifa  padrão (Com Desconto Adicional)
| obs                                                      | TC Num | mi                            | mt        |          |
| Ligação de 120min de uma classe típica válida            |     24 | 04/Nov/2015 00:00:00          | mi+120Min |          |
| Ligação de 120min de uma classe típica inválida          |     25 | 04/Nov/2015 10:00:00          | mi+120min |          |
| Ligação de 120min Explora limite de termino as 8h        |     26 | 04/Nov/2015 08:00:00 - 120Min | mi+120Min | valido   |
| Ligação de 120min Explorar limite de termino antes das 8 |     27 | 04/Nov/2015 06:59:59 - 120Min | mi+59Min  | invalido |
| Ligação de 120min Explorar limite de termino apos as 8h  |     28 | 04/Nov/2015 07:00:01 - 120Min | mi+59Min  | valido   |


#+NAME: TarifDir (da Tarifa ComDesc (de manha) para Tarif Padrao Com Desconto Adic)
#+BEGIN_SRC java
        String label12="###[24] [TarifDif ComDescAdic] (Ligação de 120min de uma classe típica válida: Ligação de 120min a partir das 00h) ";
        LocalDateTime mi12 = LocalDateTime.of(2015,Month.NOVEMBER,04,8,0);
        LocalDateTime mt12 = mi12.plusMinutes(120);
        double vlr12 = 24.0;
        
        String label12="###[25] [TarifDif ComDescAdic] (Ligação de 120min de uma classe típica inválida: Ligação de 120min a partir das 10:00h) ";
        LocalDateTime mi12 = LocalDateTime.of(2015,Month.NOVEMBER,04,10,0);
        LocalDateTime mt12 = mi12.plusMinutes(120);
        double vlr12 = 24.0;
        
        String label13="###[26] [TarifDif ComDescAdic] (Ligação de 120min Explora limite de termino as 8h: Ligação de  	120min que termina 8 em ponto) ";
        LocalDateTime mi13 = LocalDateTime.of(2015,Month.NOVEMBER,04,8,0).minusMinutes(120);
        LocalDateTime mt13 = mi13.plusMinutes(120);
        double vlr13 = 24.0;
                
        String label13="###[27] [TarifDif ComDescAdic] (Ligação de 120min Explorar limite de termino antes das 8: Ligação de 120min que termina 1s antes das 8) ";
        LocalDateTime mi13 = LocalDateTime.of(2015,Month.NOVEMBER,04,8,0).minusSeconds((120*60)+1);
        LocalDateTime mt13 = mi13.plusMinutes(120);
        double vlr13 = 24.0; //como nao termina as 8 em ponto em diante nao he esse vlr que deve ser cobrado

        String label14="###[28] [TarifDif ComDescAdic] ( Ligação de 120min Explorar limite de termino apos as 8h: Ligação de 120 min que termina 8:00:01) ";
        LocalDateTime mi14 = LocalDateTime.of(2015,Month.NOVEMBER,04,8,0).minusSeconds((120*60)-1);
        LocalDateTime mt14 = mi14.plusMinutes(120);
        double vlr14 = 24.0;        
#+END_SRC


*** Para o caso de inicio na tarifa com desconto (parte da tarde) e termino na tarifa padrao (Com Desconto Adicional)  (Vice)
| Variável de Entrada | Classes Eq Válidas                            | Classes Eq Inválidas                        |
| Mi                  | DD/MM/AA:18:00:00 <= Mi < DD+1/MM/AA:08:00:00 | DD/MM/AA:08:00:00 <= Mi < DD/MM/AA:18:00:00 |
| Mt                  | Mt >= DD+1/MM/AA:08:00:00                     | Mt qualquer                                 |
| Du = (Mt-Mi)        | Du > 60                                       | Du < 60                                     |
Aqui só pega ligações muito longas, até improváveis de acontecerem
mas... Obviamente se uma ligação ir de um dia anterior até o próximo
dia depois das 8, sempre será maior que 60 min.
Mt qualquer, significa que se o Mi inicial começar num intervalo que
não é de tarifação com desconto, não importa qdo termina porque não
vai dar pra testar uma ligação que começa num horário com desconto e
termina num horário sem desconto.

#+NAME:Tbl TarifDir (da ComDesc (parte da tarde) e termino no tarfPadr Com Desconto Adic)
#+CAPTION: Casos de Testes p/ Tarifa Diferencia: saindo do horário de tarififa com desconto para horario de tarifa padrao ( desconto Adicional)
| obs                          | TC Num | mi                   | mt                      |        |
| Ligacao de uma classe valida |     29 | 04/Nov/2015 23:50:00 | proximo dia as 08:00:00 | valido |


#+NAME TarfDif da ComDesc (parte da tarde) e termino na TarifPadr (Com Desc Adic)
#+BEGIN_SRC java
        String label15="###[29] [TarifDif ComDescAdic] (Ligacao de uma classe valida: Ligação de 8:10min de duração que comeca as 23:50 e termina as 8:00 do dia seguinte ) ";
        LocalDateTime mi15 = LocalDateTime.of(2015,Month.NOVEMBER,04,23,50);
        LocalDateTime mt15 = LocalDateTime.of(2015,Month.NOVEMBER,05,8,00);
        double vlr15 = 98.0;
#+END_SRC


*** Para o caso de inicio na tarifa padrao e término na tarifa com desconto (Sem Desconto Adicional) (Versa)
| Variável de Entrada | Classes Eq Válidas                          | Classes Eq Inválidas                          |
| Mi                  | DD/MM/AA:08:00:00 <= Mi < DD/MM/AA:18:00:00 | DD/MM/AA:18:00:00 <= Mi < DD+1/MM/AA:08:00:00 |
| Mt                  | Mt > DD/MM/AA:18h                           | Mt >= DD/MM/AA:18                             |
| Du = (Mt-Mi)        | Du < 60                                     | Du > 60                                       |


#+NAME:Tbl TarifDir (da TarfPadr para TarifComDesc) sem Desconto Adic)
#+CAPTION: Casos de Testes p/ Tarifa Diferencia: saindo do horário de tarififa padrao para horario de tarifa com Desconto (Sem desconto Adicional)
| obs                           | TC Num | mi                           | mt       |          |
| Ligacao classe valida         |     30 | 04/Nov/2015 17:50:00         | mi+59Min | valida   |
| Ligacao classe invalida       |     31 | 04/Nov/2015 20:00:00         | mi+59Min | invalida |
| Explorar 18h em ponto         |     32 | 04/Nov/2015 18:00:00 - 59min | mi+59Min | valido   |
| Explorar limite posterior 18h |     33 | 04/Nov/2015 18:00:00 - 59min | mi+59Min | valido   |
| Explorar limite anterior 18h  |     34 | 04/Nov/2015 17:59:59 - 59min | mi+59Min | invalido |

#+Name: Tarif (Da TarifPadr para TarifComDesc) (Sem Desconto Adic)
#+BEGIN_SRC java        
        String label16="###[30] [TarifDif SemDescAdic] (Ligacao classe valida: Ligacao de 59min que comeca as 17:50:00) ";
        LocalDateTime mi16 = LocalDateTime.of(2015,Month.NOVEMBER,04,17,50);
        LocalDateTime mt16 = mi16.plusMinutes(59);
        double vlr16 = 13.8; 

        String label16="###[31] [TarifDif SemDescAdic] (Ligacao classe invalida: Ligacao de 59min que comeca as 20:00:00 ) ";
        LocalDateTime mi16 = LocalDateTime.of(2015,Month.NOVEMBER,04,20,00);
        LocalDateTime mt16 = mi16.plusMinutes(59);
        double vlr16 = 13.8; 
        
        String label17="###[32] [TarifDif SemDescAdic] (Explorar 18h: Ligacao de 59min que comeca as 17:00:59 e termina as 18 em ponto) ";
        LocalDateTime mi17 = LocalDateTime.of(2015,Month.NOVEMBER,04,18,00).minusMinutes(59);
        LocalDateTime mt17 = mi17.plusMinutes(59);
        double vlr17 = 23.6; 

        String label18="###[33] [TarifDif SemDescAdic] (Explorar limite posterior 18h: Ligacao de 59min que termina 18:00:01) ";
        LocalDateTime mi18 = LocalDateTime.of(2015,Month.NOVEMBER,04,18,00).minusSeconds((59*60)-1);
        LocalDateTime mt18 = mi17.plusMinutes(59);
        double vlr18 = 23.4; //o minuto das 18h custa ,2 

        String label17="###[34] [TarifDif SemDescAdic] (Explorar limite anterior 18h: Ligacao de 59 Min que termina as 17:59:59 ) ";
        LocalDateTime mi17 = LocalDateTime.of(2015,Month.NOVEMBER,04,18,00).minusSeconds((59*60)-1);
        LocalDateTime mt17 = mi17.plusMinutes(59);
        double vlr17 = 23.6;                                
#+END_SRC


*** Para o caso de inicio na tarifa padrao e término na tarifa com desconto (Com Desconto Adicional) (Versa)
| Variável de Entrada | Classes Eq Válidas                          | Classes Eq Inválidas                          |
| Mi                  | DD/MM/AA:08:00:00 <= Mi < DD/MM/AA:18:00:00 | DD/MM/AA:18:00:00 <= Mi < DD+1/MM/AA:08:00:00 |
| Mt                  | Mt > DD/MM/AA:18h                           | Mt >= DD/MM/AA:18                             |
| Du = (Mt-Mi)        | Du < 60                                     | Du > 60                                       |

#+NAME:Tbl TarifDir (da TarfPadr para TarifComDesc) Com Desconto Adic)
#+CAPTION: Casos de Testes p/ Tarifa Diferencia: saindo do horário de tarififa padrao para horario de tarifa com Desconto (Com desconto Adicional)
| obs                           | TC Num | mi                            | mt        |          |
| Ligacao classe valida         |     35 | 04/Nov/2015 17:50:00          | mi+120Min | valida   |
| Ligacao classe invalida       |     36 | 04/Nov/2015 20:00:00          | mi+120Min | invalida |
| Explorar 18h em ponto         |     37 | 04/Nov/2015 16:59:59 - 120min | mi+120Min | valido   |
| Explorar limite anterior 18h  |     38 | 04/Nov/2015 16:59:59 - 120min | mi+120Min | valido   |
| Explorar limite posterior 18h |     39 | 04/Nov/2015 16:00:00 - 120min | mi+120Min | invalido |



#+NAME: TarifDif (da TarifPadr para TarifComDesc) (Com Desconto Adicional)
#+BEGIN_SRC java
        String label19="###[35] [TarifDif ComDescAdic] (Ligacao classe valida: Ligação de 120min comecando as 17:50:00) ";
        LocalDateTime mi19 = LocalDateTime.of(2015,Month.NOVEMBER,04,17,50);
        LocalDateTime mt19 = mi19.plusMinutes(120);
        double vlr19 = 26.4; 

        String label18="###[36] [TarifDif ComDescAdic] (Ligacao classe invalida: Ligacao de 120min a partir das 20:00:00) ";
        LocalDateTime mi18 = LocalDateTime.of(2015,Month.NOVEMBER,04,20,00);
        LocalDateTime mt18 = mi18.plusMinutes(120);
        double vlr18 = 24.0;

        String label20="###[37] [TarifDif ComDescAdic] (Explorar 18h em ponto: Ligação de 120min que termina 18h em ponto) ";
        LocalDateTime mi20 = LocalDateTime.of(2015,Month.NOVEMBER,04,17,50);
        LocalDateTime mt20 = mi20.plusMinutes(120);
        double vlr20 = 26.4;
        
        String label19="###[38] [TarifDif ComDescAdic] (Explorar limite anterior 18h: Ligação de 120min que termina 17:59:59 ) ";
        LocalDateTime mi19 = LocalDateTime.of(2015,Month.NOVEMBER,04,18,00).minusSeconds((120*60)+1);
        LocalDateTime mt19 = mi19.plusMinutes(120);        
        double vlr19 = 26.4;
        
        String label21="###[39] [TarifDif ComDescAdic] (Explorar 18h em ponto: Ligação de 120min que termina 18:00:01) ";
        LocalDateTime mi21 = LocalDateTime.of(2015,Month.NOVEMBER,04,18,00).minusSeconds((120*60)-1);
        LocalDateTime mt21 = mi21.plusMinutes(120);
        double vlr21 = 26.4;
#+END_SRC

